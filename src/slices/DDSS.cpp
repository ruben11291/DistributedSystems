// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `DDSS.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <DDSS.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __DDSS__Collector__injectSubmatrix_name = "injectSubmatrix";

const ::std::string __DDSS__Processor__init_name = "init";

const ::std::string __DDSS__Processor__injectFisrt_name = "injectFisrt";

const ::std::string __DDSS__Processor__injectSecond_name = "injectSecond";

const ::std::string __DDSS__Operations__matrixMultiply_name = "matrixMultiply";

}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::DDSS::upCast(::IceProxy::DDSS::Collector* p) { return p; }

void
::IceProxy::DDSS::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::DDSS::Collector>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::DDSS::Collector;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::DDSS::Collector::injectSubmatrix(const ::DDSS::Matrix& m, ::Ice::Int row, ::Ice::Int col, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __DDSS__Collector__injectSubmatrix_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::DDSS::Collector* __del = dynamic_cast< ::IceDelegate::DDSS::Collector*>(__delBase.get());
            __del->injectSubmatrix(m, row, col, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::DDSS::Collector::begin_injectSubmatrix(const ::DDSS::Matrix& m, ::Ice::Int row, ::Ice::Int col, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DDSS__Collector__injectSubmatrix_name, __del, __cookie);
    try
    {
        __result->__prepare(__DDSS__Collector__injectSubmatrix_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(m);
        __os->write(row);
        __os->write(col);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::DDSS::Collector::end_injectSubmatrix(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __DDSS__Collector__injectSubmatrix_name);
}

const ::std::string&
IceProxy::DDSS::Collector::ice_staticId()
{
    return ::DDSS::Collector::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::DDSS::Collector::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::DDSS::Collector);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::DDSS::Collector::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::DDSS::Collector);
}

::IceProxy::Ice::Object*
IceProxy::DDSS::Collector::__newInstance() const
{
    return new Collector;
}
::IceProxy::Ice::Object* ::IceProxy::DDSS::upCast(::IceProxy::DDSS::Processor* p) { return p; }

void
::IceProxy::DDSS::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::DDSS::Processor>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::DDSS::Processor;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::DDSS::Processor::init(::Ice::Int row, ::Ice::Int col, const ::DDSS::ProcessorPrx& above, const ::DDSS::ProcessorPrx& left, ::Ice::Int order, const ::DDSS::CollectorPrx& target, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __DDSS__Processor__init_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::DDSS::Processor* __del = dynamic_cast< ::IceDelegate::DDSS::Processor*>(__delBase.get());
            __del->init(row, col, above, left, order, target, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::DDSS::Processor::begin_init(::Ice::Int row, ::Ice::Int col, const ::DDSS::ProcessorPrx& above, const ::DDSS::ProcessorPrx& left, ::Ice::Int order, const ::DDSS::CollectorPrx& target, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DDSS__Processor__init_name, __del, __cookie);
    try
    {
        __result->__prepare(__DDSS__Processor__init_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(row);
        __os->write(col);
        __os->write(above);
        __os->write(left);
        __os->write(order);
        __os->write(target);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::DDSS::Processor::end_init(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __DDSS__Processor__init_name);
}

void
IceProxy::DDSS::Processor::injectFisrt(const ::DDSS::Matrix& a, ::Ice::Int step, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __DDSS__Processor__injectFisrt_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::DDSS::Processor* __del = dynamic_cast< ::IceDelegate::DDSS::Processor*>(__delBase.get());
            __del->injectFisrt(a, step, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::DDSS::Processor::begin_injectFisrt(const ::DDSS::Matrix& a, ::Ice::Int step, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DDSS__Processor__injectFisrt_name, __del, __cookie);
    try
    {
        __result->__prepare(__DDSS__Processor__injectFisrt_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(a);
        __os->write(step);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::DDSS::Processor::end_injectFisrt(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __DDSS__Processor__injectFisrt_name);
}

void
IceProxy::DDSS::Processor::injectSecond(const ::DDSS::Matrix& b, ::Ice::Int step, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __DDSS__Processor__injectSecond_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::DDSS::Processor* __del = dynamic_cast< ::IceDelegate::DDSS::Processor*>(__delBase.get());
            __del->injectSecond(b, step, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::DDSS::Processor::begin_injectSecond(const ::DDSS::Matrix& b, ::Ice::Int step, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DDSS__Processor__injectSecond_name, __del, __cookie);
    try
    {
        __result->__prepare(__DDSS__Processor__injectSecond_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(b);
        __os->write(step);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::DDSS::Processor::end_injectSecond(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __DDSS__Processor__injectSecond_name);
}

const ::std::string&
IceProxy::DDSS::Processor::ice_staticId()
{
    return ::DDSS::Processor::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::DDSS::Processor::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::DDSS::Processor);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::DDSS::Processor::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::DDSS::Processor);
}

::IceProxy::Ice::Object*
IceProxy::DDSS::Processor::__newInstance() const
{
    return new Processor;
}
::IceProxy::Ice::Object* ::IceProxy::DDSS::upCast(::IceProxy::DDSS::Operations* p) { return p; }

void
::IceProxy::DDSS::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::DDSS::Operations>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::DDSS::Operations;
        v->__copyFrom(proxy);
    }
}

::DDSS::Matrix
IceProxy::DDSS::Operations::matrixMultiply(const ::DDSS::Matrix& a, const ::DDSS::Matrix& b, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __DDSS__Operations__matrixMultiply_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__DDSS__Operations__matrixMultiply_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::DDSS::Operations* __del = dynamic_cast< ::IceDelegate::DDSS::Operations*>(__delBase.get());
            return __del->matrixMultiply(a, b, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::DDSS::Operations::begin_matrixMultiply(const ::DDSS::Matrix& a, const ::DDSS::Matrix& b, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__DDSS__Operations__matrixMultiply_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DDSS__Operations__matrixMultiply_name, __del, __cookie);
    try
    {
        __result->__prepare(__DDSS__Operations__matrixMultiply_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(a);
        __os->write(b);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::DDSS::Matrix
IceProxy::DDSS::Operations::end_matrixMultiply(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __DDSS__Operations__matrixMultiply_name);
    ::DDSS::Matrix __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::DDSS::Operations::ice_staticId()
{
    return ::DDSS::Operations::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::DDSS::Operations::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::DDSS::Operations);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::DDSS::Operations::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::DDSS::Operations);
}

::IceProxy::Ice::Object*
IceProxy::DDSS::Operations::__newInstance() const
{
    return new Operations;
}

void
IceDelegateM::DDSS::Collector::injectSubmatrix(const ::DDSS::Matrix& m, ::Ice::Int row, ::Ice::Int col, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __DDSS__Collector__injectSubmatrix_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(m);
        __os->write(row);
        __os->write(col);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::DDSS::Processor::init(::Ice::Int row, ::Ice::Int col, const ::DDSS::ProcessorPrx& above, const ::DDSS::ProcessorPrx& left, ::Ice::Int order, const ::DDSS::CollectorPrx& target, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __DDSS__Processor__init_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(row);
        __os->write(col);
        __os->write(above);
        __os->write(left);
        __os->write(order);
        __os->write(target);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::DDSS::Processor::injectFisrt(const ::DDSS::Matrix& a, ::Ice::Int step, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __DDSS__Processor__injectFisrt_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(a);
        __os->write(step);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::DDSS::Processor::injectSecond(const ::DDSS::Matrix& b, ::Ice::Int step, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __DDSS__Processor__injectSecond_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(b);
        __os->write(step);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

::DDSS::Matrix
IceDelegateM::DDSS::Operations::matrixMultiply(const ::DDSS::Matrix& a, const ::DDSS::Matrix& b, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __DDSS__Operations__matrixMultiply_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(a);
        __os->write(b);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::DDSS::Matrix __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateD::DDSS::Collector::injectSubmatrix(const ::DDSS::Matrix& m, ::Ice::Int row, ::Ice::Int col, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::DDSS::Matrix& __p_m, ::Ice::Int __p_row, ::Ice::Int __p_col, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_m(__p_m),
            _m_row(__p_row),
            _m_col(__p_col)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::DDSS::Collector* servant = dynamic_cast< ::DDSS::Collector*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->injectSubmatrix(_m_m, _m_row, _m_col, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::DDSS::Matrix& _m_m;
        ::Ice::Int _m_row;
        ::Ice::Int _m_col;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __DDSS__Collector__injectSubmatrix_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(m, row, col, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::DDSS::Processor::init(::Ice::Int row, ::Ice::Int col, const ::DDSS::ProcessorPrx& above, const ::DDSS::ProcessorPrx& left, ::Ice::Int order, const ::DDSS::CollectorPrx& target, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int __p_row, ::Ice::Int __p_col, const ::DDSS::ProcessorPrx& __p_above, const ::DDSS::ProcessorPrx& __p_left, ::Ice::Int __p_order, const ::DDSS::CollectorPrx& __p_target, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_row(__p_row),
            _m_col(__p_col),
            _m_above(__p_above),
            _m_left(__p_left),
            _m_order(__p_order),
            _m_target(__p_target)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::DDSS::Processor* servant = dynamic_cast< ::DDSS::Processor*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->init(_m_row, _m_col, _m_above, _m_left, _m_order, _m_target, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int _m_row;
        ::Ice::Int _m_col;
        const ::DDSS::ProcessorPrx& _m_above;
        const ::DDSS::ProcessorPrx& _m_left;
        ::Ice::Int _m_order;
        const ::DDSS::CollectorPrx& _m_target;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __DDSS__Processor__init_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(row, col, above, left, order, target, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::DDSS::Processor::injectFisrt(const ::DDSS::Matrix& a, ::Ice::Int step, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::DDSS::Matrix& __p_a, ::Ice::Int __p_step, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_a(__p_a),
            _m_step(__p_step)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::DDSS::Processor* servant = dynamic_cast< ::DDSS::Processor*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->injectFisrt(_m_a, _m_step, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::DDSS::Matrix& _m_a;
        ::Ice::Int _m_step;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __DDSS__Processor__injectFisrt_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(a, step, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::DDSS::Processor::injectSecond(const ::DDSS::Matrix& b, ::Ice::Int step, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::DDSS::Matrix& __p_b, ::Ice::Int __p_step, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_b(__p_b),
            _m_step(__p_step)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::DDSS::Processor* servant = dynamic_cast< ::DDSS::Processor*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->injectSecond(_m_b, _m_step, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::DDSS::Matrix& _m_b;
        ::Ice::Int _m_step;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __DDSS__Processor__injectSecond_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(b, step, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::DDSS::Matrix
IceDelegateD::DDSS::Operations::matrixMultiply(const ::DDSS::Matrix& a, const ::DDSS::Matrix& b, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::DDSS::Matrix& __result, const ::DDSS::Matrix& __p_a, const ::DDSS::Matrix& __p_b, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_a(__p_a),
            _m_b(__p_b)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::DDSS::Operations* servant = dynamic_cast< ::DDSS::Operations*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->matrixMultiply(_m_a, _m_b, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::DDSS::Matrix& _result;
        const ::DDSS::Matrix& _m_a;
        const ::DDSS::Matrix& _m_b;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __DDSS__Operations__matrixMultiply_name, ::Ice::Normal, __context);
    ::DDSS::Matrix __result;
    try
    {
        _DirectI __direct(__result, a, b, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Object* DDSS::upCast(::DDSS::Collector* p) { return p; }

namespace
{
const ::std::string __DDSS__Collector_ids[2] =
{
    "::DDSS::Collector",
    "::Ice::Object"
};

}

bool
DDSS::Collector::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__DDSS__Collector_ids, __DDSS__Collector_ids + 2, _s);
}

::std::vector< ::std::string>
DDSS::Collector::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__DDSS__Collector_ids[0], &__DDSS__Collector_ids[2]);
}

const ::std::string&
DDSS::Collector::ice_id(const ::Ice::Current&) const
{
    return __DDSS__Collector_ids[0];
}

const ::std::string&
DDSS::Collector::ice_staticId()
{
    return __DDSS__Collector_ids[0];
}

::Ice::DispatchStatus
DDSS::Collector::___injectSubmatrix(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::DDSS::Matrix m;
    ::Ice::Int row;
    ::Ice::Int col;
    __is->read(m);
    __is->read(row);
    __is->read(col);
    __inS.endReadParams();
    injectSubmatrix(m, row, col, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __DDSS__Collector_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "injectSubmatrix"
};

}

::Ice::DispatchStatus
DDSS::Collector::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__DDSS__Collector_all, __DDSS__Collector_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __DDSS__Collector_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___injectSubmatrix(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
DDSS::Collector::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
DDSS::Collector::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
DDSS::__patch(CollectorPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::DDSS::CollectorPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::DDSS::Collector::ice_staticId(), v);
    }
}

::Ice::Object* DDSS::upCast(::DDSS::Processor* p) { return p; }

namespace
{
const ::std::string __DDSS__Processor_ids[2] =
{
    "::DDSS::Processor",
    "::Ice::Object"
};

}

bool
DDSS::Processor::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__DDSS__Processor_ids, __DDSS__Processor_ids + 2, _s);
}

::std::vector< ::std::string>
DDSS::Processor::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__DDSS__Processor_ids[0], &__DDSS__Processor_ids[2]);
}

const ::std::string&
DDSS::Processor::ice_id(const ::Ice::Current&) const
{
    return __DDSS__Processor_ids[0];
}

const ::std::string&
DDSS::Processor::ice_staticId()
{
    return __DDSS__Processor_ids[0];
}

::Ice::DispatchStatus
DDSS::Processor::___init(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int row;
    ::Ice::Int col;
    ::DDSS::ProcessorPrx above;
    ::DDSS::ProcessorPrx left;
    ::Ice::Int order;
    ::DDSS::CollectorPrx target;
    __is->read(row);
    __is->read(col);
    __is->read(above);
    __is->read(left);
    __is->read(order);
    __is->read(target);
    __inS.endReadParams();
    init(row, col, above, left, order, target, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
DDSS::Processor::___injectFisrt(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::DDSS::Matrix a;
    ::Ice::Int step;
    __is->read(a);
    __is->read(step);
    __inS.endReadParams();
    injectFisrt(a, step, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
DDSS::Processor::___injectSecond(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::DDSS::Matrix b;
    ::Ice::Int step;
    __is->read(b);
    __is->read(step);
    __inS.endReadParams();
    injectSecond(b, step, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __DDSS__Processor_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "init",
    "injectFisrt",
    "injectSecond"
};

}

::Ice::DispatchStatus
DDSS::Processor::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__DDSS__Processor_all, __DDSS__Processor_all + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __DDSS__Processor_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___init(in, current);
        }
        case 5:
        {
            return ___injectFisrt(in, current);
        }
        case 6:
        {
            return ___injectSecond(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
DDSS::Processor::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
DDSS::Processor::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
DDSS::__patch(ProcessorPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::DDSS::ProcessorPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::DDSS::Processor::ice_staticId(), v);
    }
}

::Ice::Object* DDSS::upCast(::DDSS::Operations* p) { return p; }

namespace
{
const ::std::string __DDSS__Operations_ids[2] =
{
    "::DDSS::Operations",
    "::Ice::Object"
};

}

bool
DDSS::Operations::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__DDSS__Operations_ids, __DDSS__Operations_ids + 2, _s);
}

::std::vector< ::std::string>
DDSS::Operations::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__DDSS__Operations_ids[0], &__DDSS__Operations_ids[2]);
}

const ::std::string&
DDSS::Operations::ice_id(const ::Ice::Current&) const
{
    return __DDSS__Operations_ids[0];
}

const ::std::string&
DDSS::Operations::ice_staticId()
{
    return __DDSS__Operations_ids[0];
}

::Ice::DispatchStatus
DDSS::Operations::___matrixMultiply(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::DDSS::Matrix a;
    ::DDSS::Matrix b;
    __is->read(a);
    __is->read(b);
    __inS.endReadParams();
    ::DDSS::Matrix __ret = matrixMultiply(a, b, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __DDSS__Operations_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "matrixMultiply"
};

}

::Ice::DispatchStatus
DDSS::Operations::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__DDSS__Operations_all, __DDSS__Operations_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __DDSS__Operations_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___matrixMultiply(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
DDSS::Operations::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
DDSS::Operations::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
DDSS::__patch(OperationsPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::DDSS::OperationsPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::DDSS::Operations::ice_staticId(), v);
    }
}
