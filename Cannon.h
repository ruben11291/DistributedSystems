// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Cannon.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Cannon_h__
#define __Cannon_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Cannon
{

class Collector;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Cannon::Collector>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Cannon::Collector*);

class Processor;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Cannon::Processor>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Cannon::Processor*);

}

}

namespace Cannon
{

class Collector;
bool operator==(const Collector&, const Collector&);
bool operator<(const Collector&, const Collector&);
::Ice::Object* upCast(::Cannon::Collector*);
typedef ::IceInternal::Handle< ::Cannon::Collector> CollectorPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Cannon::Collector> CollectorPrx;
void __patch(CollectorPtr&, const ::Ice::ObjectPtr&);

class Processor;
bool operator==(const Processor&, const Processor&);
bool operator<(const Processor&, const Processor&);
::Ice::Object* upCast(::Cannon::Processor*);
typedef ::IceInternal::Handle< ::Cannon::Processor> ProcessorPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Cannon::Processor> ProcessorPrx;
void __patch(ProcessorPtr&, const ::Ice::ObjectPtr&);

}

namespace Cannon
{

typedef ::std::vector< ::Ice::Double> DoubleSeq;

struct Matrix
{
    ::Ice::Int ncols;
    ::Cannon::DoubleSeq data;
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::Cannon::Matrix>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 5;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::Cannon::Matrix, S>
{
    static void write(S* __os, const ::Cannon::Matrix& v)
    {
        __os->write(v.ncols);
        __os->write(v.data);
    }
};

template<class S>
struct StreamReader< ::Cannon::Matrix, S>
{
    static void read(S* __is, ::Cannon::Matrix& v)
    {
        __is->read(v.ncols);
        __is->read(v.data);
    }
};

}

namespace Cannon
{

class Callback_Collector_injectSubmatrix_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Collector_injectSubmatrix_Base> Callback_Collector_injectSubmatrixPtr;

class Callback_Processor_init_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Processor_init_Base> Callback_Processor_initPtr;

class Callback_Processor_injectMatrix_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Processor_injectMatrix_Base> Callback_Processor_injectMatrixPtr;

}

namespace IceProxy
{

namespace Cannon
{

class Collector : virtual public ::IceProxy::Ice::Object
{
public:

    void injectSubmatrix(::Ice::Int row, ::Ice::Int col, const ::Cannon::Matrix& m)
    {
        injectSubmatrix(row, col, m, 0);
    }
    void injectSubmatrix(::Ice::Int row, ::Ice::Int col, const ::Cannon::Matrix& m, const ::Ice::Context& __ctx)
    {
        injectSubmatrix(row, col, m, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_injectSubmatrix(::Ice::Int row, ::Ice::Int col, const ::Cannon::Matrix& m, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_injectSubmatrix(row, col, m, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_injectSubmatrix(::Ice::Int row, ::Ice::Int col, const ::Cannon::Matrix& m, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_injectSubmatrix(row, col, m, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_injectSubmatrix(::Ice::Int row, ::Ice::Int col, const ::Cannon::Matrix& m, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_injectSubmatrix(row, col, m, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_injectSubmatrix(::Ice::Int row, ::Ice::Int col, const ::Cannon::Matrix& m, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_injectSubmatrix(row, col, m, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_injectSubmatrix(::Ice::Int row, ::Ice::Int col, const ::Cannon::Matrix& m)
    {
        return begin_injectSubmatrix(row, col, m, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_injectSubmatrix(::Ice::Int row, ::Ice::Int col, const ::Cannon::Matrix& m, const ::Ice::Context& __ctx)
    {
        return begin_injectSubmatrix(row, col, m, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_injectSubmatrix(::Ice::Int row, ::Ice::Int col, const ::Cannon::Matrix& m, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_injectSubmatrix(row, col, m, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_injectSubmatrix(::Ice::Int row, ::Ice::Int col, const ::Cannon::Matrix& m, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_injectSubmatrix(row, col, m, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_injectSubmatrix(::Ice::Int row, ::Ice::Int col, const ::Cannon::Matrix& m, const ::Cannon::Callback_Collector_injectSubmatrixPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_injectSubmatrix(row, col, m, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_injectSubmatrix(::Ice::Int row, ::Ice::Int col, const ::Cannon::Matrix& m, const ::Ice::Context& __ctx, const ::Cannon::Callback_Collector_injectSubmatrixPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_injectSubmatrix(row, col, m, &__ctx, __del, __cookie);
    }

    void end_injectSubmatrix(const ::Ice::AsyncResultPtr&);
    
private:

    void injectSubmatrix(::Ice::Int, ::Ice::Int, const ::Cannon::Matrix&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_injectSubmatrix(::Ice::Int, ::Ice::Int, const ::Cannon::Matrix&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Collector> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Collector*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Collector> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Collector*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Collector> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Collector*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Collector> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Collector*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Collector> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Collector*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Collector> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Collector*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Collector> ice_secure(bool __secure) const
    {
        return dynamic_cast<Collector*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Collector> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Collector*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Collector> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Collector*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Collector> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Collector*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Collector> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Collector*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Collector> ice_twoway() const
    {
        return dynamic_cast<Collector*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Collector> ice_oneway() const
    {
        return dynamic_cast<Collector*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Collector> ice_batchOneway() const
    {
        return dynamic_cast<Collector*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Collector> ice_datagram() const
    {
        return dynamic_cast<Collector*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Collector> ice_batchDatagram() const
    {
        return dynamic_cast<Collector*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Collector> ice_compress(bool __compress) const
    {
        return dynamic_cast<Collector*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Collector> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Collector*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Collector> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Collector*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Collector> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Collector*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Processor : virtual public ::IceProxy::Ice::Object
{
public:

    void init(::Ice::Int row, ::Ice::Int col, const ::Cannon::ProcessorPrx& up, const ::Cannon::ProcessorPrx& left, ::Ice::Int order, const ::Cannon::CollectorPrx& target)
    {
        init(row, col, up, left, order, target, 0);
    }
    void init(::Ice::Int row, ::Ice::Int col, const ::Cannon::ProcessorPrx& up, const ::Cannon::ProcessorPrx& left, ::Ice::Int order, const ::Cannon::CollectorPrx& target, const ::Ice::Context& __ctx)
    {
        init(row, col, up, left, order, target, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_init(::Ice::Int row, ::Ice::Int col, const ::Cannon::ProcessorPrx& up, const ::Cannon::ProcessorPrx& left, ::Ice::Int order, const ::Cannon::CollectorPrx& target, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_init(row, col, up, left, order, target, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_init(::Ice::Int row, ::Ice::Int col, const ::Cannon::ProcessorPrx& up, const ::Cannon::ProcessorPrx& left, ::Ice::Int order, const ::Cannon::CollectorPrx& target, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_init(row, col, up, left, order, target, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_init(::Ice::Int row, ::Ice::Int col, const ::Cannon::ProcessorPrx& up, const ::Cannon::ProcessorPrx& left, ::Ice::Int order, const ::Cannon::CollectorPrx& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_init(row, col, up, left, order, target, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_init(::Ice::Int row, ::Ice::Int col, const ::Cannon::ProcessorPrx& up, const ::Cannon::ProcessorPrx& left, ::Ice::Int order, const ::Cannon::CollectorPrx& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_init(row, col, up, left, order, target, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_init(::Ice::Int row, ::Ice::Int col, const ::Cannon::ProcessorPrx& up, const ::Cannon::ProcessorPrx& left, ::Ice::Int order, const ::Cannon::CollectorPrx& target)
    {
        return begin_init(row, col, up, left, order, target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_init(::Ice::Int row, ::Ice::Int col, const ::Cannon::ProcessorPrx& up, const ::Cannon::ProcessorPrx& left, ::Ice::Int order, const ::Cannon::CollectorPrx& target, const ::Ice::Context& __ctx)
    {
        return begin_init(row, col, up, left, order, target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_init(::Ice::Int row, ::Ice::Int col, const ::Cannon::ProcessorPrx& up, const ::Cannon::ProcessorPrx& left, ::Ice::Int order, const ::Cannon::CollectorPrx& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_init(row, col, up, left, order, target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_init(::Ice::Int row, ::Ice::Int col, const ::Cannon::ProcessorPrx& up, const ::Cannon::ProcessorPrx& left, ::Ice::Int order, const ::Cannon::CollectorPrx& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_init(row, col, up, left, order, target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_init(::Ice::Int row, ::Ice::Int col, const ::Cannon::ProcessorPrx& up, const ::Cannon::ProcessorPrx& left, ::Ice::Int order, const ::Cannon::CollectorPrx& target, const ::Cannon::Callback_Processor_initPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_init(row, col, up, left, order, target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_init(::Ice::Int row, ::Ice::Int col, const ::Cannon::ProcessorPrx& up, const ::Cannon::ProcessorPrx& left, ::Ice::Int order, const ::Cannon::CollectorPrx& target, const ::Ice::Context& __ctx, const ::Cannon::Callback_Processor_initPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_init(row, col, up, left, order, target, &__ctx, __del, __cookie);
    }

    void end_init(const ::Ice::AsyncResultPtr&);
    
private:

    void init(::Ice::Int, ::Ice::Int, const ::Cannon::ProcessorPrx&, const ::Cannon::ProcessorPrx&, ::Ice::Int, const ::Cannon::CollectorPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_init(::Ice::Int, ::Ice::Int, const ::Cannon::ProcessorPrx&, const ::Cannon::ProcessorPrx&, ::Ice::Int, const ::Cannon::CollectorPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void injectMatrix(const ::Cannon::Matrix& a, const ::Cannon::Matrix& b, ::Ice::Int step)
    {
        injectMatrix(a, b, step, 0);
    }
    void injectMatrix(const ::Cannon::Matrix& a, const ::Cannon::Matrix& b, ::Ice::Int step, const ::Ice::Context& __ctx)
    {
        injectMatrix(a, b, step, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_injectMatrix(const ::Cannon::Matrix& a, const ::Cannon::Matrix& b, ::Ice::Int step, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_injectMatrix(a, b, step, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_injectMatrix(const ::Cannon::Matrix& a, const ::Cannon::Matrix& b, ::Ice::Int step, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_injectMatrix(a, b, step, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_injectMatrix(const ::Cannon::Matrix& a, const ::Cannon::Matrix& b, ::Ice::Int step, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_injectMatrix(a, b, step, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_injectMatrix(const ::Cannon::Matrix& a, const ::Cannon::Matrix& b, ::Ice::Int step, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_injectMatrix(a, b, step, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_injectMatrix(const ::Cannon::Matrix& a, const ::Cannon::Matrix& b, ::Ice::Int step)
    {
        return begin_injectMatrix(a, b, step, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_injectMatrix(const ::Cannon::Matrix& a, const ::Cannon::Matrix& b, ::Ice::Int step, const ::Ice::Context& __ctx)
    {
        return begin_injectMatrix(a, b, step, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_injectMatrix(const ::Cannon::Matrix& a, const ::Cannon::Matrix& b, ::Ice::Int step, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_injectMatrix(a, b, step, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_injectMatrix(const ::Cannon::Matrix& a, const ::Cannon::Matrix& b, ::Ice::Int step, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_injectMatrix(a, b, step, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_injectMatrix(const ::Cannon::Matrix& a, const ::Cannon::Matrix& b, ::Ice::Int step, const ::Cannon::Callback_Processor_injectMatrixPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_injectMatrix(a, b, step, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_injectMatrix(const ::Cannon::Matrix& a, const ::Cannon::Matrix& b, ::Ice::Int step, const ::Ice::Context& __ctx, const ::Cannon::Callback_Processor_injectMatrixPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_injectMatrix(a, b, step, &__ctx, __del, __cookie);
    }

    void end_injectMatrix(const ::Ice::AsyncResultPtr&);
    
private:

    void injectMatrix(const ::Cannon::Matrix&, const ::Cannon::Matrix&, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_injectMatrix(const ::Cannon::Matrix&, const ::Cannon::Matrix&, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Processor> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Processor*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Processor> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Processor*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Processor> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Processor*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Processor> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Processor*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Processor> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Processor*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Processor> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Processor*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Processor> ice_secure(bool __secure) const
    {
        return dynamic_cast<Processor*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Processor> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Processor*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Processor> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Processor*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Processor> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Processor*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Processor> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Processor*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Processor> ice_twoway() const
    {
        return dynamic_cast<Processor*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Processor> ice_oneway() const
    {
        return dynamic_cast<Processor*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Processor> ice_batchOneway() const
    {
        return dynamic_cast<Processor*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Processor> ice_datagram() const
    {
        return dynamic_cast<Processor*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Processor> ice_batchDatagram() const
    {
        return dynamic_cast<Processor*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Processor> ice_compress(bool __compress) const
    {
        return dynamic_cast<Processor*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Processor> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Processor*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Processor> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Processor*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Processor> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Processor*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace Cannon
{

class Collector : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void injectSubmatrix(::Ice::Int, ::Ice::Int, const ::Cannon::Matrix&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class Processor : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void init(::Ice::Int, ::Ice::Int, const ::Cannon::ProcessorPrx&, const ::Cannon::ProcessorPrx&, ::Ice::Int, const ::Cannon::CollectorPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void injectMatrix(const ::Cannon::Matrix&, const ::Cannon::Matrix&, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace Cannon
{

class Collector : virtual public ::IceDelegate::Cannon::Collector,
                  virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void injectSubmatrix(::Ice::Int, ::Ice::Int, const ::Cannon::Matrix&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class Processor : virtual public ::IceDelegate::Cannon::Processor,
                  virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void init(::Ice::Int, ::Ice::Int, const ::Cannon::ProcessorPrx&, const ::Cannon::ProcessorPrx&, ::Ice::Int, const ::Cannon::CollectorPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void injectMatrix(const ::Cannon::Matrix&, const ::Cannon::Matrix&, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace Cannon
{

class Collector : virtual public ::IceDelegate::Cannon::Collector,
                  virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void injectSubmatrix(::Ice::Int, ::Ice::Int, const ::Cannon::Matrix&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class Processor : virtual public ::IceDelegate::Cannon::Processor,
                  virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void init(::Ice::Int, ::Ice::Int, const ::Cannon::ProcessorPrx&, const ::Cannon::ProcessorPrx&, ::Ice::Int, const ::Cannon::CollectorPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void injectMatrix(const ::Cannon::Matrix&, const ::Cannon::Matrix&, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace Cannon
{

class Collector : virtual public ::Ice::Object
{
public:

    typedef CollectorPrx ProxyType;
    typedef CollectorPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void injectSubmatrix(::Ice::Int, ::Ice::Int, const ::Cannon::Matrix&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___injectSubmatrix(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const Collector& l, const Collector& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Collector& l, const Collector& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Processor : virtual public ::Ice::Object
{
public:

    typedef ProcessorPrx ProxyType;
    typedef ProcessorPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void init(::Ice::Int, ::Ice::Int, const ::Cannon::ProcessorPrx&, const ::Cannon::ProcessorPrx&, ::Ice::Int, const ::Cannon::CollectorPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___init(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void injectMatrix(const ::Cannon::Matrix&, const ::Cannon::Matrix&, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___injectMatrix(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const Processor& l, const Processor& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Processor& l, const Processor& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Cannon
{

template<class T>
class CallbackNC_Collector_injectSubmatrix : public Callback_Collector_injectSubmatrix_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Collector_injectSubmatrix(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Collector_injectSubmatrixPtr
newCallback_Collector_injectSubmatrix(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Collector_injectSubmatrix<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Collector_injectSubmatrixPtr
newCallback_Collector_injectSubmatrix(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Collector_injectSubmatrix<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Collector_injectSubmatrixPtr
newCallback_Collector_injectSubmatrix(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Collector_injectSubmatrix<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Collector_injectSubmatrixPtr
newCallback_Collector_injectSubmatrix(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Collector_injectSubmatrix<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Collector_injectSubmatrix : public Callback_Collector_injectSubmatrix_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Collector_injectSubmatrix(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Collector_injectSubmatrixPtr
newCallback_Collector_injectSubmatrix(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Collector_injectSubmatrix<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Collector_injectSubmatrixPtr
newCallback_Collector_injectSubmatrix(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Collector_injectSubmatrix<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Collector_injectSubmatrixPtr
newCallback_Collector_injectSubmatrix(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Collector_injectSubmatrix<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Collector_injectSubmatrixPtr
newCallback_Collector_injectSubmatrix(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Collector_injectSubmatrix<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Processor_init : public Callback_Processor_init_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Processor_init(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Processor_initPtr
newCallback_Processor_init(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Processor_init<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Processor_initPtr
newCallback_Processor_init(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Processor_init<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Processor_initPtr
newCallback_Processor_init(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Processor_init<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Processor_initPtr
newCallback_Processor_init(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Processor_init<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Processor_init : public Callback_Processor_init_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Processor_init(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Processor_initPtr
newCallback_Processor_init(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Processor_init<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Processor_initPtr
newCallback_Processor_init(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Processor_init<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Processor_initPtr
newCallback_Processor_init(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Processor_init<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Processor_initPtr
newCallback_Processor_init(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Processor_init<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Processor_injectMatrix : public Callback_Processor_injectMatrix_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Processor_injectMatrix(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Processor_injectMatrixPtr
newCallback_Processor_injectMatrix(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Processor_injectMatrix<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Processor_injectMatrixPtr
newCallback_Processor_injectMatrix(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Processor_injectMatrix<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Processor_injectMatrixPtr
newCallback_Processor_injectMatrix(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Processor_injectMatrix<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Processor_injectMatrixPtr
newCallback_Processor_injectMatrix(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Processor_injectMatrix<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Processor_injectMatrix : public Callback_Processor_injectMatrix_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Processor_injectMatrix(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Processor_injectMatrixPtr
newCallback_Processor_injectMatrix(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Processor_injectMatrix<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Processor_injectMatrixPtr
newCallback_Processor_injectMatrix(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Processor_injectMatrix<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Processor_injectMatrixPtr
newCallback_Processor_injectMatrix(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Processor_injectMatrix<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Processor_injectMatrixPtr
newCallback_Processor_injectMatrix(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Processor_injectMatrix<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
